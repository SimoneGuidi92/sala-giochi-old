{"ast":null,"code":"import { checkCollision, getRandomPosition } from './canvas';\nimport { SNAKE_LENGTH, APPLE_COUNT } from './constants';\nexport function isGameOver(scene) {\n  let snake = scene.snake;\n  let head = snake[0];\n  let body = snake.slice(1, snake.length);\n  return body.some(segment => checkCollision(segment, head));\n}\nexport function nextDirection(previous, next) {\n  let isOpposite = (previous, next) => {\n    return next.x === previous.x * -1 || next.y === previous.y * -1;\n  };\n\n  if (isOpposite(previous, next)) {\n    return previous;\n  }\n\n  return next;\n}\nexport function move(snake, [direction, snakeLength]) {\n  let nx = snake[0].x;\n  let ny = snake[0].y;\n  nx += 1 * direction.x;\n  ny += 1 * direction.y;\n  let tail;\n\n  if (snakeLength > snake.length) {\n    tail = {\n      x: nx,\n      y: ny\n    };\n  } else {\n    tail = snake.pop();\n    tail.x = nx;\n    tail.y = ny;\n  }\n\n  snake.unshift(tail);\n  return snake;\n}\nexport function eat(apples, snake) {\n  let head = snake[0];\n\n  for (let i = 0; i < apples.length; i++) {\n    if (checkCollision(apples[i], head)) {\n      apples.splice(i, 1);\n      return [...apples, getRandomPosition(snake)];\n    }\n  }\n\n  return apples;\n}\nexport function generateSnake() {\n  let snake = [];\n\n  for (let i = SNAKE_LENGTH - 1; i >= 0; i--) {\n    snake.push({\n      x: i,\n      y: 0\n    });\n  }\n\n  return snake;\n}\nexport function generateApples() {\n  let apples = [];\n\n  for (let i = 0; i < APPLE_COUNT; i++) {\n    apples.push(getRandomPosition());\n  }\n\n  return apples;\n}","map":null,"metadata":{},"sourceType":"module"}