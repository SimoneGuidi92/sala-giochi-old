{"ast":null,"code":"export const COLS = 30;\nexport const ROWS = 30;\nexport const GAP_SIZE = 1;\nexport const CELL_SIZE = 10;\nexport const CANVAS_WIDTH = COLS * (CELL_SIZE + GAP_SIZE);\nexport const CANVAS_HEIGHT = ROWS * (CELL_SIZE + GAP_SIZE);\nexport function createCanvasElement() {\n  const canvas = document.createElement('canvas');\n  canvas.width = CANVAS_WIDTH;\n  canvas.height = CANVAS_HEIGHT;\n  canvas.style.display = \"flex\";\n  canvas.style.margin = \"auto\";\n  return canvas;\n}\nexport function removeCanvasElement() {\n  const canvas = document.querySelector('canvas');\n\n  if (canvas) {\n    canvas.remove();\n  }\n}\nexport function renderScene(ctx, scene) {\n  renderBackground(ctx); // renderScore(ctx, scene.score);\n\n  renderApples(ctx, scene.apples);\n  renderSnake(ctx, scene.snake);\n}\nexport function renderScore(ctx, score) {\n  let textX = CANVAS_WIDTH / 2;\n  let textY = CANVAS_HEIGHT / 2;\n  drawText(ctx, score.toString(), textX, textY, 'rgba(0, 0, 0, 0.1)', 150);\n}\nexport function renderApples(ctx, apples) {\n  apples.forEach(apple => paintCell(ctx, apple, 'red'));\n}\nexport function renderSnake(ctx, snake) {\n  snake.forEach((segment, index) => paintCell(ctx, wrapBounds(segment), getSegmentColor(index)));\n}\nexport function renderGameOver(ctx) {\n  ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n  let textX = CANVAS_WIDTH / 2;\n  let textY = CANVAS_HEIGHT / 2;\n  drawText(ctx, 'GAME OVER!', textX, textY, 'black', 25);\n}\nexport function getRandomPosition(snake = []) {\n  let position = {\n    x: getRandomNumber(0, COLS - 1),\n    y: getRandomNumber(0, ROWS - 1)\n  };\n\n  if (isEmptyCell(position, snake)) {\n    return position;\n  }\n\n  return getRandomPosition(snake);\n}\nexport function checkCollision(a, b) {\n  return a.x === b.x && a.y === b.y;\n}\n\nfunction isEmptyCell(position, snake) {\n  return !snake.some(segment => checkCollision(segment, position));\n}\n\nfunction getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction renderBackground(ctx) {\n  ctx.fillStyle = '#EEE';\n  ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n}\n\nfunction drawText(ctx, text, x, y, fillStyle, fontSize, horizontalAlign = 'center', verticalAlign = 'middle') {\n  ctx.fillStyle = fillStyle;\n  ctx.font = `bold ${fontSize}px sans-serif`;\n  let textX = x;\n  let textY = y;\n  ctx.textAlign = horizontalAlign;\n  ctx.textBaseline = verticalAlign;\n  ctx.fillText(text, textX, textY);\n}\n\nfunction getSegmentColor(index) {\n  return index === 0 ? 'black' : '#2196f3';\n}\n\nfunction wrapBounds(point) {\n  point.x = point.x >= COLS ? 0 : point.x < 0 ? COLS - 1 : point.x;\n  point.y = point.y >= ROWS ? 0 : point.y < 0 ? ROWS - 1 : point.y;\n  return point;\n}\n\nfunction paintCell(ctx, point, color) {\n  const x = point.x * CELL_SIZE + point.x * GAP_SIZE;\n  const y = point.y * CELL_SIZE + point.y * GAP_SIZE;\n  ctx.fillStyle = color;\n  ctx.fillRect(x, y, CELL_SIZE, CELL_SIZE);\n}","map":null,"metadata":{},"sourceType":"module"}