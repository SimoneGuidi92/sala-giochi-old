{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let GameComponent = /*#__PURE__*/(() => {\n  class GameComponent {\n    constructor() {\n      this.blockSize = 10;\n      this.width = 500;\n      this.height = 500;\n      this.score = 0;\n    }\n\n    ngOnInit() {\n      this.canvas = document.getElementById(\"snakeCanvas\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.initGame();\n    }\n\n    initGame() {\n      this.score = 0;\n      this.snake = [{\n        x: 10,\n        y: 10\n      }, {\n        x: 9,\n        y: 10\n      }, {\n        x: 8,\n        y: 10\n      }]; // this.snake.forEach((element: any, index: number) => {\n      //   // element.x = (index + 1) * this.blockSize;\n      //   // element.y = 10 * this.blockSize;\n      //   element.x = Math.floor(this.snake[index].x * (this.width / this.blockSize)) * this.blockSize;\n      //   element.y = Math.floor(this.snake[index].y * (this.height / this.blockSize)) * this.blockSize;\n      // });\n\n      this.apple = this.generateApple();\n      this.direction = 'right';\n      this.intervalId = setInterval(() => {\n        this.update();\n        this.draw();\n      }, 100);\n    }\n\n    generateApple() {\n      return {\n        x: Math.floor(Math.random() * (this.width / this.blockSize)) * this.blockSize,\n        y: Math.floor(Math.random() * (this.height / this.blockSize)) * this.blockSize\n      };\n    }\n\n    update() {\n      let head = {\n        x: this.snake[0].x,\n        y: this.snake[0].y\n      }; // this.snake.forEach((element: any, index: number) => {\n      //   // element.x = (index + 1) * this.blockSize;\n      //   // element.y = 10 * this.blockSize;\n      //   element.x = Math.floor(this.snake[index].x * (this.width / this.blockSize)) * this.blockSize;\n      //   element.y = Math.floor(this.snake[index].y * (this.height / this.blockSize)) * this.blockSize;\n      // });\n\n      head.x = Math.floor(this.snake[0].x / this.blockSize) * this.blockSize;\n      head.y = Math.floor(this.snake[0].y / this.blockSize) * this.blockSize; // head.x = Math.floor(this.snake[0].x * (this.width / this.blockSize)) * this.blockSize,\n      // head.y = Math.floor(this.snake[0].y * (this.height / this.blockSize)) * this.blockSize\n\n      switch (this.direction) {\n        case 'right':\n          head.x += this.blockSize;\n          break;\n\n        case 'left':\n          head.x -= this.blockSize;\n          break;\n\n        case 'up':\n          head.y -= this.blockSize;\n          break;\n\n        case 'down':\n          head.y += this.blockSize;\n          break;\n      }\n\n      if (head.x === this.apple.x && head.y === this.apple.y) {\n        this.score++;\n        this.apple = this.generateApple();\n      } else {\n        this.snake.pop();\n      }\n\n      this.snake.unshift(head);\n    }\n\n    draw() {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n      this.ctx.fillStyle = 'red';\n      this.ctx.fillRect(this.apple.x, this.apple.y, this.blockSize, this.blockSize);\n      this.ctx.fillStyle = 'green';\n      this.snake.forEach(block => {\n        this.ctx.fillRect(block.x, block.y, this.blockSize, this.blockSize);\n      });\n      this.ctx.fillStyle = 'black';\n      this.ctx.font = 'bold 20px Arial';\n      this.ctx.fillText(`Score: ${this.score}`, 10, 25);\n    }\n\n    handleKeyDown(event) {\n      switch (event.key) {\n        case 'ArrowRight':\n          this.direction = 'right';\n          break;\n\n        case 'ArrowLeft':\n          this.direction = 'left';\n          break;\n\n        case 'ArrowUp':\n          this.direction = 'up';\n          break;\n\n        case 'ArrowDown':\n          this.direction = 'down';\n          break;\n      }\n    }\n\n  }\n\n  GameComponent.ɵfac = function GameComponent_Factory(t) {\n    return new (t || GameComponent)();\n  };\n\n  GameComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GameComponent,\n    selectors: [[\"app-game\"]],\n    hostBindings: function GameComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function GameComponent_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyDown($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"game-container\"], [\"id\", \"snakeCanvas\", \"width\", \"500\", \"height\", \"500\"]],\n    template: function GameComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"game works!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 0);\n        i0.ɵɵelement(3, \"canvas\", 1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".game-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center}canvas[_ngcontent-%COMP%]{border:2px solid #f70505}\"]\n  });\n  return GameComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}